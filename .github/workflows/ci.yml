name: CI

on:
  workflow_dispatch:
    inputs:
      check_run_id:
        description: Check Run ID
        required: false

jobs:
  check-in:
    name: Check In
    runs-on: ubuntu-latest
    if: github.event.inputs.check_run_id

    steps:  
      - name: Get Current Run
        id: get_run
        run: |
          set -e
          
          http_code=$(curl -s -o run.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }})
      
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to fetch run ${{ github.run_id }}"
            exit 1
          fi
          
          HTML_URL=$(jq -r '.html_url' run.json)
          
          echo "Run HTML URL: $HTML_URL"          
          echo "::set-output name=html_url::$HTML_URL"

      - name: Update CI Check
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"status":"in_progress","details_url":"${{ steps.get_run.outputs.html_url }}"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [check-in]
    if: cancelled() == false
    steps:
      - name: Run a one-line script
        run: |
          echo "Working"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 2"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 3"
          sleep 5

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [build]
    if: cancelled() == false && needs.build.result == 'success'
    steps:
      - name: Run a one-line script
        if: success() && cancelled() == false
        run: |
          echo "Working"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 2"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 3"
          sleep 5

  check-out:
    name: Check Out
    runs-on: ubuntu-latest
    if: always()
    needs: [check-in, build, test]

    steps:
      - name: Update CI Check - Success
        if: github.event.inputs.check_run_id && needs.test.result == 'success'
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"success"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update CI Check - Failure
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'failure')
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"failure"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update CI Check - Cancelled
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'cancelled')
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"cancelled"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update Badge - Success
        uses: schneegans/dynamic-badges-action@v1.1.0
        if: github.ref == 'refs/heads/main' && needs.test.result == 'success'
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: bb89d69d31409ee5f747bac35a1157d9
          filename: _gha-experiments-main.json
          label: main
          message: success
          color: success

      - name: Update Badge - Failure
        uses: schneegans/dynamic-badges-action@v1.0.0
        if: github.ref == 'refs/heads/main' && contains(needs.*.result, 'failure')
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: bb89d69d31409ee5f747bac35a1157d9
          filename: gha-experiments-main.json
          label: main
          message: failure
          color: critical
