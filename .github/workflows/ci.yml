name: CI

on:
  workflow_dispatch:
    inputs:
      check_run_id:
        description: Check Run ID
        required: false

jobs:
  check-in:
    name: Check In
    runs-on: ubuntu-latest
    if: github.event.inputs.check_run_id

    steps:  
      - name: Get Current Run
        id: get_run
        run: |
          HTML_URL=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            | jq -r '.html_url') \
            && echo "::set-output name=html_url::$HTML_URL"

      - name: Update CI Check
        run: |
          curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/${{ github.event.inputs.check_run_id }} \
            -d '{"status":"in_progress","details_url":"${{ steps.get_run.outputs.html_url }}"}'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [check-in]
    if: cancelled() == false
    steps:
      - name: Run a one-line script
        run: |
          echo "Working"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 2"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 3"
          sleep 5

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [build]
    if: cancelled() == false
    steps:
      - name: Run a one-line script
        run: |
          echo "Working"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 2"
          sleep 5

      - name: Run a one-line script
        run: |
          echo "Working 3"
          sleep 5

  check-out:
    name: Check Out
    runs-on: ubuntu-latest
    if: always()
    needs: [check-in, build, test]

    steps:
      - name: Update CI Check - Success
        if: github.event.inputs.check_run_id && needs.test.result == 'success'
        run: |
          curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/${{ github.event.inputs.check_run_id }} \
            -d '{"status":"completed","conclusion":"success"}'

      - name: Update CI Check - Failure
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'failure')
        run: |
          curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/${{ github.event.inputs.check_run_id }} \
            -d '{"status":"completed","conclusion":"failure"}'

      - name: Update CI Check - Cancelled
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'cancelled')
        run: |
          curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/${{ github.event.inputs.check_run_id }} \
            -d '{"status":"completed","conclusion":"cancelled"}'

      - name: Update Badge - Success
        uses: schneegans/dynamic-badges-action@v1.0.0
        if: github.event.inputs.check_run_id == null && needs.test.result == 'success'
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: bb89d69d31409ee5f747bac35a1157d9
          filename: gha-experiments-main.json
          label: main
          message: success
          color: brightgreen

      - name: Update Badge - Failure
        uses: schneegans/dynamic-badges-action@v1.0.0
        if: github.event.inputs.check_run_id == null && contains(needs.*.result, 'failure')
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: bb89d69d31409ee5f747bac35a1157d9
          filename: gha-experiments-main.json
          label: main
          message: failure
          color: critical
