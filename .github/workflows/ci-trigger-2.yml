name: CI Trigger 2

on:
  issue_comment:
    types: [created]

env:
  CONFIGURATION: |
    { "trigger_prefix" : "/ci " }

  WORKFLOW_DATA: |
    {
      "icu" : { "check_name": "icu", "workflow_id": "icu.yml" },
      "curl" : { "check_name": "curl", "workflow_id": "curl.yml" },
      "libxml2" : { "check_name": "libxml2", "workflow_id": "libxml2.yml" },
      "zlib" : { "check_name": "zlib", "workflow_id": "zlib.yml" },
      "swift-5.3" : { "check_name": "swift-5.3", "workflow_id": "swift-snapshot.yml" },
      "swift-5.4" : { "check_name": "swift-5.4", "workflow_id": "swift-snapshot.yml" },
      "swift-5.5" : { "check_name": "swift-5.5", "workflow_id": "swift-snapshot.yml" },
      "swift-main" : { "check_name": "swift-main", "workflow_id": "swift-snapshot.yml" }
    }

jobs:
  set-matrix:
    name: Set Matrix

    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/ci ')
  
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Print Debug Info
        run: echo "${{ github.event.comment.author_association }}"

      - name: Set Matrix
        id: set-matrix
        env:
          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          set -x
          
          if [ "$AUTHOR_ASSOCIATION" != "COLLABORATOR" ] && [ "$AUTHOR_ASSOCIATION" != "OWNER" ]; then
            echo "::error::Only collaborators or owner could request this action"
            exit 1
          fi
          
          declare -a MATRIX=()
          for COMMENT_TOKEN in $COMMENT_BODY; do
            case "$COMMENT_TOKEN" in
              
              swift-5.3 | swift-5.4 | swift-5.5 | swift-main | icu | curl | libxml2 | zlib)
                MATRIX+=("\"$COMMENT_TOKEN\"")
                ;;
                            
              /ci | test)
                ;;
                
              *)
                echo "::warning::Unknown token: $COMMENT_TOKEN"
                ;;
                
            esac
          done
          
          MATRIX=$(echo ${MATRIX[@]} | tr ' ' ',')
          echo $MATRIX
          #echo "::set-output name=matrix::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
          echo "::set-output name=matrix::{\"workflow\":[$MATRIX]}"
          echo "::set-output name=matrix_include::${{ env.WORKFLOW_DATA }}"

  trigger-workflow:
    name: Trigger Workflow

    runs-on: ubuntu-latest
    needs: [set-matrix]
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/ci ')

    strategy:
      fail-fast: false
      matrix:
        ${{ fromJSON(needs.set-matrix.outputs.matrix) }}

    steps:
      - name: Print Debug Info
        run: |
          echo "${{ toJSON(matrix) }}"
          echo "${{ needs.set-matrix.outputs.matrix_include }}"
          
#       - name: Fetch Pull Request Info
#         id: get_pr
#         run: |
#           PR_INFO=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}) \
#             && HEAD_SHA=$(echo $PR_INFO | jq -r '.head.sha') \
#             && HEAD_REF=$(echo $PR_INFO | jq -r '.head.ref') \
#             && echo "::set-output name=head_sha::$HEAD_SHA" \
#             && echo "::set-output name=head_ref::$HEAD_REF"

#       - name: Create swift-main Check
#         id: swift_main_check
#         if: contains(github.event.comment.body, 'swift-main') || contains(github.event.comment.body, 'swift-all') || contains(github.event.comment.body, 'all')
#         run: |
#           CHECK_RUN_ID=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             -X POST https://api.github.com/repos/${{ github.repository }}/check-runs \
#             -d '{"name":"swift-main","head_sha":"${{ steps.get_pr.outputs.head_sha }}"}' \
#             | jq -r '.id') \
#             && echo "::set-output name=check_run_id::$CHECK_RUN_ID"

#       - name: Trigger swift-main Workflow
#         if: contains(github.event.comment.body, 'swift-main') || contains(github.event.comment.body, 'swift-all') || contains(github.event.comment.body, 'all')
#         run: |
#           curl -s -H 'Authorization: token ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/actions/workflows/swift-snapshot.yml/dispatches \
#             -d '{"ref":"${{ steps.get_pr.outputs.head_ref }}","inputs":{"check_run_id":"${{ steps.swift_main_check.outputs.check_run_id }}","branch-spec":"main"}}'

#       - name: Create swift-5.4 Check
#         id: swift_54_check
#         if: contains(github.event.comment.body, 'swift-5.4') || contains(github.event.comment.body, 'swift-all') || contains(github.event.comment.body, 'all')
#         run: |
#           CHECK_RUN_ID=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             -X POST https://api.github.com/repos/${{ github.repository }}/check-runs \
#             -d '{"name":"swift-5.4","head_sha":"${{ steps.get_pr.outputs.head_sha }}"}' \
#             | jq -r '.id') \
#             && echo "::set-output name=check_run_id::$CHECK_RUN_ID"

#       - name: Trigger swift-5.4 Workflow
#         if: contains(github.event.comment.body, 'swift-5.4') || contains(github.event.comment.body, 'swift-all') || contains(github.event.comment.body, 'all')
#         run: |
#           curl -s -H 'Authorization: token ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/actions/workflows/swift-snapshot.yml/dispatches \
#             -d '{"ref":"${{ steps.get_pr.outputs.head_ref }}","inputs":{"check_run_id":"${{ steps.swift_54_check.outputs.check_run_id }}","branch-spec":"5.4"}}'

#       - name: Create swift-5.3 Check
#         id: swift_53_check
#         if: contains(github.event.comment.body, 'swift-5.3') || contains(github.event.comment.body, 'swift-all') || contains(github.event.comment.body, 'all')
#         run: |
#           CHECK_RUN_ID=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             -X POST https://api.github.com/repos/${{ github.repository }}/check-runs \
#             -d '{"name":"swift-5.3","head_sha":"${{ steps.get_pr.outputs.head_sha }}"}' \
#             | jq -r '.id') \
#             && echo "::set-output name=check_run_id::$CHECK_RUN_ID"

#       - name: Trigger swift-5.3 Workflow
#         if: contains(github.event.comment.body, 'swift-5.3') || contains(github.event.comment.body, 'swift-all') || contains(github.event.comment.body, 'all')
#         run: |
#           curl -s -H 'Authorization: token ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/actions/workflows/swift-snapshot.yml/dispatches \
#             -d '{"ref":"${{ steps.get_pr.outputs.head_ref }}","inputs":{"check_run_id":"${{ steps.swift_53_check.outputs.check_run_id }}","branch-spec":"5.3"}}'

#       - name: Create curl Check
#         id: curl_check
#         if: contains(github.event.comment.body, 'curl') || contains(github.event.comment.body, 'all')
#         run: |
#           CHECK_RUN_ID=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             -X POST https://api.github.com/repos/${{ github.repository }}/check-runs \
#             -d '{"name":"curl","head_sha":"${{ steps.get_pr.outputs.head_sha }}"}' \
#             | jq -r '.id') \
#             && echo "::set-output name=check_run_id::$CHECK_RUN_ID"

#       - name: Trigger curl Workflow
#         if: contains(github.event.comment.body, 'curl') || contains(github.event.comment.body, 'all')
#         run: |
#           curl -s -H 'Authorization: token ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/actions/workflows/curl.yml/dispatches \
#             -d '{"ref":"${{ steps.get_pr.outputs.head_ref }}","inputs":{"check_run_id":"${{ steps.curl_check.outputs.check_run_id }}"}}'

#       - name: Create libxml2 Check
#         id: libxml2_check
#         if: contains(github.event.comment.body, 'libxml2') || contains(github.event.comment.body, 'all')
#         run: |
#           CHECK_RUN_ID=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             -X POST https://api.github.com/repos/${{ github.repository }}/check-runs \
#             -d '{"name":"libxml2","head_sha":"${{ steps.get_pr.outputs.head_sha }}"}' \
#             | jq -r '.id') \
#             && echo "::set-output name=check_run_id::$CHECK_RUN_ID"

#       - name: Trigger libxml2 Workflow
#         if: contains(github.event.comment.body, 'libxml2') || contains(github.event.comment.body, 'all')
#         run: |
#           curl -s -H 'Authorization: token ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/actions/workflows/libxml2.yml/dispatches \
#             -d '{"ref":"${{ steps.get_pr.outputs.head_ref }}","inputs":{"check_run_id":"${{ steps.libxml2_check.outputs.check_run_id }}"}}'

#       - name: Create icu Check
#         id: icu_check
#         if: contains(github.event.comment.body, 'icu') || contains(github.event.comment.body, 'all')
#         run: |
#           CHECK_RUN_ID=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             -X POST https://api.github.com/repos/${{ github.repository }}/check-runs \
#             -d '{"name":"icu","head_sha":"${{ steps.get_pr.outputs.head_sha }}"}' \
#             | jq -r '.id') \
#             && echo "::set-output name=check_run_id::$CHECK_RUN_ID"

#       - name: Trigger icu Workflow
#         if: contains(github.event.comment.body, 'icu') || contains(github.event.comment.body, 'all')
#         run: |
#           curl -s -H 'Authorization: token ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/actions/workflows/icu.yml/dispatches \
#             -d '{"ref":"${{ steps.get_pr.outputs.head_ref }}","inputs":{"check_run_id":"${{ steps.icu_check.outputs.check_run_id }}"}}'

#       - name: Create zlib Check
#         id: zlib_check
#         if: contains(github.event.comment.body, 'zlib') || contains(github.event.comment.body, 'all')
#         run: |
#           CHECK_RUN_ID=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#             -X POST https://api.github.com/repos/${{ github.repository }}/check-runs \
#             -d '{"name":"zlib","head_sha":"${{ steps.get_pr.outputs.head_sha }}"}' \
#             | jq -r '.id') \
#             && echo "::set-output name=check_run_id::$CHECK_RUN_ID"

#       - name: Trigger zlib Workflow
#         if: contains(github.event.comment.body, 'zlib') || contains(github.event.comment.body, 'all')
#         run: |
#           curl -s -H 'Authorization: token ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}' \
#             https://api.github.com/repos/${{ github.repository }}/actions/workflows/zlib.yml/dispatches \
#             -d '{"ref":"${{ steps.get_pr.outputs.head_ref }}","inputs":{"check_run_id":"${{ steps.zlib_check.outputs.check_run_id }}"}}'
